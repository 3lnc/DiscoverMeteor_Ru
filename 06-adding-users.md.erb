---
title: Добавление пользователей
slug: adding-users
date: 0006/01/01
number: 6
contents: Узнайте про учетные записи пользователей в Meteor.|Добавляем авторизацию пользователей для Microscope.|Используем встроенный accounts-ui пакет для пользовательского интерфейса.
paragraphs: 27
---

Пока что нам удалось создать и вывести статичные данные, а также связать все в простое приложение.

Мы даже увидели как наш UI отражает любое изменение данных, и как новые или измененные данные мгновенно появляются в UI. Не смотря на это наш сайт все еще хромает - мы не можем вводить данные. У нас даже полностью отсутствует такое понятие как пользователи.

Давайте посмотрим что с этим можно сделать.

### Аккаунты для пользователей - легко!

В большинстве сред веб разработки добавление пользовательских аккаунтов это нетривиальная задача. Почти каждое веб приложение предполагает наличие пользователей, но не смотря на это добавление подобной функциональности вовсе не так просто, как это должно быть. Что еще хуже - как только вам приходится иметь дело с OAuth или любым другим протоколом авторизации, вещи быстро выходят из под контроля.

К счастью, Meteor позаботился и об этом. Благодаря тому, что пакеты Meteor могут иметь один и тот же код на сервере (Javascript) и клиенте (Javascript, HTML и CSS), мы получаем систему пользовательских аккаунтов почти бесплатно.

Мы могли бы использовать стандартный компонент Meteor для аккаунтов (добавив его с помощью `mrt add accounts-ui`), но так как мы начали использовать Bootstrap в нашем приложении, мы воспользуемся пакетом `accounts-ui-bootstrap-dropdown`. Не волнуйтесь, единственная разница между этими двумя пакетами это стили внешнего вида. Откройте командную строку и вызовите:

~~~bash
$ mrt add accounts-ui-bootstrap-dropdown
$ mrt add accounts-password
~~~
<%= caption "Терминал" %>

Эти две команды дают нам возможность использовать специальные шаблоны аккаунтов. Мы можем подключить их на нашем сайте с помощью хелпера `{{loginButtons}}`. Подсказка: вы можете контролировать с какой стороны появится ваше выпадающее меню авторизации пользователя с помощью атрибута `align`. Например: `{{loginButtons  align="right"}}`

Добавим кнопки в заголовок страницы. Так как заголовок становится все больше, вынесем его в отдельный шаблон в папке `client/views/includes/` Мы также добавим тегов и классов из Bootstrap чтобы все выглядело красиво:

~~~html
<template name="layout">
  <div class="container">
    {{>header}}
    <div id="main" class="row-fluid">
      {{yield}}
    </div>
  </div>
</template>
~~~
<%= caption "client/views/application/layout.html" %>
<%= highlight "6" %>

~~~html
<template name="header">
  <header class="navbar">
    <div class="navbar-inner">
      <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </a>
      <a class="brand" href="{{pathFor 'postsList'}}">Microscope</a>
      <div class="nav-collapse collapse">
        <ul class="nav pull-right">
          <li>{{loginButtons}}</li>
        </ul>
      </div>
    </div>
  </header>
</template>
~~~
<%= caption "client/views/includes/header.html" %>

Теперь если открыть наше приложение в браузере, можно заметить кнопки `Login` в верхнем правом углу сайта.

<%= screenshot "6-1", "Пользовательские аккаунты Meteor" %>

Все базовые действия пользователя теперь доступны - можно регистрироваться, авторизироваться, запрашивать смену пароля, и все остальное, что может понадобиться простому сайту с аккаунтами.

Чтобы сообщить нашей системе аккаунтов что мы хотим дать пользователям авторизироваться просто введя имя пользователя, можно просто добавить блок `Accounts.ui` в новом `config.js` файле в папке `client/helpers/`:

~~~js
Accounts.ui.config({
  passwordSignupFields: 'USERNAME_ONLY'
});
~~~
<%= caption "client/helpers/config.js" %>

<%= commit "6-1", "Добавлены аккаунты и шаблон с кнопками" %>

### Создаем первого пользователя

Попробуйте зарегистрироваться с помощью кнопки `Sign up`. После этого надпись на кнопке сменится на ваше имя пользователя. Это означает что вы успешно зарегистрировались, и для вас была создана учетная запись. Но где эта запись сохранилась?

Добавив пакет `accounts`, Meteor создал специальную коллекцию `Meteor.users`. Чтобы ее просмотреть, откройте консоль браузера и введите:

~~~js
❯ Meteor.users.findOne();
~~~
<%= caption "Консоль браузера" %>

Консоль должна вернуть объект указывающий на объект вашего пользователя. Обратите внимание, там будет ваше имя пользователя, а также уникальный идентификатор `_id`. Вы можете также получить текущего пользователя с помощью команды `Meteor.user()`.

Теперь выйдите и зайдите как другой пользователь. `Meteor.user()` теперь вернет вам второго пользователя. Попробуем посчитать, сколько у нас пользователей всего:

~~~js
❯ Meteor.users.find().count();
1
~~~
<%= caption "Консоль браузера" %>

Консоль вернет нам 1. Интересно, разве их не должно быть 2? Неужели первый пользователь был удален? Если вы попробуете залогиниться как первый пользователь, вы заметите что все на месте.

Давайте посмотрим, что происходит в главной базе данных Mongo. Запустите терминал Mongo командой `meteor mongo`, и посчитайте количество пользователей:

~~~bash
> db.users.count()
2
~~~
<%= caption "Консоль Mongo" %>

Оба пользователя присутствуют. Тогда почему мы видим только одного пользователя в консоли браузера?

### Мистическая публикация!

////

////

////

////

////

////

~~~bash
> db.users.findOne()
{
  "createdAt" : 1365649830922,
  "_id" : "kYdBd9hr3fWPGPcii",
  "services" : {
    "password" : {
      "srp" : {
        "identity" : "qyFCnw4MmRbmGyBdN",
        "salt" : "YcBjRa7ArXn5tdCdE",
        "verifier" : "df2c001edadf4e475e703fa8cd093abd4b63afccbca48fad1d2a0986ff2bcfba920d3f122d358c4af0c287f8eaf9690a2c7e376d701ab2fe1acd53a5bc3e843905d5dcaf2f1c47c25bf5dd87764d1f58c8c01e4539872a9765d2b27c700dcdedadf5ac82521467356d3f91dbeaf9848158987c6d359c5423e6b9cabf34fa0b45"
      }
    },
    "resume" : {
      "loginTokens" : [
        {
          "token" : "BMHipQqjfLoPz7gru",
          "when" : 1365649830922
        }
      ]
    }
  },
  "username" : "tmeasday"
}
~~~
<%= caption "Mongo console" %>

////

~~~js
❯ Meteor.users.findOne();
Object {_id: "kYdBd9hr3fWPGPcii", username: "tmeasday"}
~~~
<%= caption "Browser console" %>

////

////

