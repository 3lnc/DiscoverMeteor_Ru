---
title: Начало работы
slug: getting-started
date: 0002/01/01
number: 2
contents: Установите Meteor и Meteorite.|Узнаете про 5 типов модулей MeteorJS.|Создадите файловую структуру вашего Meteor-приложения.
paragraphs: 49
---

Первое впечатление крайне важно, и установка Meteor должна пройти без особых сложностей. В большинстве случаев, весь процесс занимает не более пяти минут.

Для начала мы можем установить Meteor набрав в терминале:

~~~bash
$ curl https://install.meteor.com | sh
~~~

Это установит глобальную команду meteor, после чего вы сможете начать использовать фреймворк.

<% note do %>

### Либо *не* устанавливаем Meteor вовсе

Если вы не можете (или не хотите) устанавливать Meteor локально, рекомендуем вам [Nitrous.io](http://nitrous.io).

Nitrous.io- это сервис, который позволяет запускать приложения и редактировать их код прямо в браузере. Мы написали небольшой [таториал по этой теме](https://www.discovermeteor.com/2013/10/04/meteor-nitrous/)

Вы можете просто пройти эту инструкцию до пункта «Устанавливаем Meteor и Meteorite» включительно, а затем снова вернуться к этой книге начиная с секции «Создаем простое приложение» текущей главы.

<% end %>
 
### Meteorite

Учитывая тот факт, что Meteor пока не поддерживает из коробки модули (packages) сторонних разработчиков, Tom Coleman (один из авторов книги) и некоторые другие члены сообщества создали [Meteorite](http://oortcloud.github.com/meteorite/), обертку для Meteor. Meteorite также берет на себя установку Meteor и связывает его с любыми модулями, которые вы найдете.

Т.к. нам потребуются модули сторонних разработчиков, то давайте установим Meteorite.

### Установка Meteorite

Сперва убедитесь в том, что git и node установлены на вашем компьютере. Установите их стандартным для вашей системы способом, или воспользуйтесь одной из ссылок:
 
- [скачать Node](http://nodejs.org/download/)
- [скачать Git](http://git-scm.com/downloads)

Далее, давайте установим Meteorite. Для этого воспользуемся командой [npm](https://npmjs.org/) (Node Package Module, стандартный способ установки модулей Node.js):

~~~bash
$ npm install -g meteorite
~~~

<% note do %>

### Ошибка доступа?

На некоторых компьютерах, чтобы пользоваться npm нужен доступ root-уровня. Чтобы избежать ошибок, используйте 'sudo -H':

~~~bash
$ sudo -H npm install -g meteorite
~~~

Можете прочесть больше по этой теме в [документации Meteorite](https://github.com/oortcloud/meteorite/blob/master/README.md#permission-woes).

<% end %>

Вот и все! Теперь Meteorite готов к работе.

На заметку: пока что Meteorite не поддерживает ОС Windows, но вы можете взглянуть на наш [таториал для Windows](http://themeteorbook.com/2013/03/20/using-meteor-and-atmopshere-on-windows/).

<% note do %>

  ### `mrt` vs `meteor`
  
Meteorite устанавливает команду mrt, которую мы будем использовать для установки модулей. А для запуска сервера, все же будем пользоваться командой meteor.
  
<% end %>

### Создаем простое приложение

Теперь, когда мы установили Meteorite, давайте создадим приложение. Чтобы это сделать, мы используем коману 'mrt' (которую устанавливает Meteorite):

~~~bash
$ mrt create microscope
~~~

Эта команда загрузит Meteor, развернет и создаст базовый, готовый к работе проект. Когда Meteorite закончит этот процесс, вы увидите, что директория 'microscope/' содержит следующее:

~~~bash
microscope.css  
microscope.html 
microscope.js   
smart.json 
~~~

Приложение, которое Meteor создал за вас - это шаблонное приложение, демонстрирующее несколько простых подходов.

Хотя наше приложение пока мало что делает, мы все же можем запустить его. Чтобы это сделать, вернитесь в окно терминала и введите:

~~~bash
$ cd microscope
$ meteor
~~~

Теперь перейдите в браузере по адресу 'http://localhost:3000/' (или 'http://0.0.0.0:3000/') и вы должны увидеть что-то вроде этого:

<%= screenshot "2-1", "Meteor's Hello World." %>

<%= commit "2-1", "Created basic microscope project." %>

Поздравляем! Вы только что создали и запустили свое первое Meteor-приложение. Кстати, чтобы прервать его работу откройте вкладку терминала, в котором оно исполняется и наберите 'ctrl+c'.

### Добавляем модуль

Теперь давайте используем Meteorite, чтобы добавить модуль, который позволит нам включить [Twitter Bootstrap](http://getbootstrap.com/) в наш проект:

~~~bash
$ mrt add bootstrap
~~~

<%= commit "2-2", "Added bootstrap package." %>

<% note do %>

### О модулях

Когда мы говорим о модулях в контексте MeteorJS,  необходимо учитывать некоторую специфику. Фреймворк использует несколько базовых типов модулей (packages):

- Ядро самого Meteor состоит из **базовых модулей**. Они автоматически включены в каждое Meteor-приложение, и вы пока можете не думать о них вовсе.
- **Официальные модули** - их сейчас порядка 37 (можете посмотреть полный список набрав команду 'meteor list'), которые вы можете по надобности импортировать в свое приложение, даже без использования Meteorite (просто набрав 'meteor add package-name').
- **Локальные модули**, которые вы создаете сами в директории '/packages'. Вам также не нужен Meteorite, чтобы их использовать.
- **Модули с Atmosphere** - это модули сторонних разработчиков. Чтобы ими пользоваться, вам нужен Meteorite
- **NPM-модули**- это модули Node.js. Из коробки они не работают с Meteor, но могут быть использованы предыдущим типом модулей.

<% end %>

### Файловая структура Meteor-приложения

Прежде чем приступить непосредственно к разработке, мы должны правильно организовать наш проект. Для того, чтобы создать нужную файловую структуру, сперва откройте директорию '/microscope' и удалите 'microscope.html', 'microscope.js' и 'microscope.css'.

Далее, создадим пять основных директорий внутри '/microscope': '/client', '/server', '/public', '/lib' и '/collections'. Также создадим пока что пустые файлы 'main.html' и 'main.js' внутри только что созданной директории '/client'. Не волнуйтесь, что сейчас это поломает приложение, мы вернемся к этим файлам в следующей главе.

Необходимо отметить, что некоторые из этих директорий имеют специальное назначение. Когда дело касается файловой структуры, у Meteor есть ряд правил:

- Код в директории '/server' исполняется только на сервере
- Код в директории '/client' исполняется только на клиенте
- Все остальные файлы исполняются и на клиенте, и на сервере
- Файлы в директории '/lib' загружаются самыми первыми
- Все файлы с именем 'main.*' загружаются самыми последними
- Статичные файлы (картинки, шрифты и т.п.) - в директории /public

Заметьте также, что несмотря на эти правила, вы не обязаны использовать предлагаемую структуру, если вы этого не хотите. Предложенная выше структура - всего лишь один из способов организации файлов, а не строгий закон.

Если хотите получить больше информации по этому вопросу, то рекомендуем почитать [официальную документацию](http://docs.meteor.com/#structuringyourapp).

<% note do %>

### MeteorJS это MVC-фреймворк?

Если вы имели опыт работы с такими фреймворками, как Ruby on Rails, вы можете задаться вопросом, придерживается ли MeteorJS архитектуры MVC (Model View Controller)?

Короткий ответ - нет! В отличие от Rails, Meteor не заставляет придерживаться какой-либо определенной архитектуры, так что в этой книге мы просто структурируем приложение так, как считаем наиболее оптимальным, не особо заботясь о том, какой абревиатурой это обозвать.

<% end %>

### Нет директории /public?

Ладно, мы соврали. Нам не нужна директория '/public', но только лишь потому, что Microscope не использует статичных файлов. Но, так как большинство других Meteor-приложений включают в себя хотя бы пару картинок, мы посчитали нужным коснуться и этой директории.

Кстати, вы должно быть заметили спрятанную директорию '.meteor'. Там находится код самого Meteor, и что-то там менять - обычно очень плохая идея. На деле вам вряд ли когда-нибудь понадобится туда даже заглядывать. Единственное исключение - это файлы '.meteor/packages' и '.meteor/release', которые отвечают соответственно за ваши модули и используемую версию Meteor. Когда вы добавляете модули или меняете версию Meteor, то иногда бывает полезно проверить эти файлы.

<% note do %>

### Underscores vs CamelCase

Что мы скажем по поводу извечного холивара 'my_variable' или 'myVariable' - неважно, каким из этих стилей вы пользуетесь, если вы используете его повсеместно.

В этой книге мы используем CamelCase, т.к. это стандартно для JavaScript (в конце концов, он именно JavaScript, а не java_script!).

Единственное исключение - это имена файлов ('my_file.js'), и CSS-классы ('.my-class'). Причина в том, что нижнее подчеркивание больше распространено в файловой системе, а CSS в самом своем синтаксисе использует дефисы ('font-family', 'text-align' и т.д.).

<% end %>

### Добавляем CSS

Эта книга не о CSS. Чтобы не тормозить вас заботой о стилях, мы решили весь CSS добавить в самом начале, чтобы не отвлекаться на него в дальнейшем.

Meteor автоматически минифицирует CSS, так что, в отличие от остальных статичных файлов, ему лучше находиться в директории '/client', а не '/public'. Давайте создадим директорию '/client/stylesheets/' и положим туда вот этот файл 'style.css':

~~~css
.grid-block, .main, .post, .comments li, .comment-form {
    background: #fff;
    border-radius: 3px;
    padding: 10px;
    margin-bottom: 10px;
    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.15);
}
body {
    background: #eee;
    color: #666666;
}
.navbar { margin-bottom: 10px }
.navbar .navbar-inner {
    border-radius: 0px 0px 3px 3px;
}
#spinner { height: 300px }
.post {
    *zoom: 1;
    -webkit-transition: all 300ms 0ms;
    -webkit-transition-delay: ease-in;
    -moz-transition: all 300ms 0ms ease-in;
    -o-transition: all 300ms 0ms ease-in;
    transition: all 300ms 0ms ease-in;
    position: relative;
    opacity: 1;
}
.post:before, .post:after {
    content: "";
    display: table;
}
.post:after { clear: both }
.post.invisible { opacity: 0 }
.post .upvote {
    display: block;
    margin: 7px 12px 0 0;
    float: left;
}
.post .post-content { float: left }
.post .post-content h3 {
    margin: 0;
    line-height: 1.4;
    font-size: 18px;
}
.post .post-content h3 a {
    display: inline-block;
    margin-right: 5px;
}
.post .post-content h3 span {
    font-weight: normal;
    font-size: 14px;
    display: inline-block;
    color: #aaaaaa;
}
.post .post-content p { margin: 0 }
.post .discuss {
    display: block;
    float: right;
    margin-top: 7px;
}
.comments {
    list-style-type: none;
    margin: 0;
}
.comments li h4 {
    font-size: 16px;
    margin: 0;
}
.comments li h4 .date {
    font-size: 12px;
    font-weight: normal;
}
.comments li h4 a { font-size: 12px }
.comments li p:last-child { margin-bottom: 0 }
.dropdown-menu span {
    display: block;
    padding: 3px 20px;
    clear: both;
    line-height: 20px;
    color: #bbb;
    white-space: nowrap;
}
.load-more {
    display: block;
    border-radius: 3px;
    background: rgba(0, 0, 0, 0.05);
    text-align: center;
    height: 60px;
    line-height: 60px;
    margin-bottom: 10px;
}
.load-more:hover {
    text-decoration: none;
    background: rgba(0, 0, 0, 0.1);
}
~~~
<%= caption "client/stylesheets/style.css" %>

<%= commit "2-3","Re-arranged file structure." %>

<% note do %>

### О CoffeeScript

В этой книге мы будем использовать чистый JavaScript, но если вы предпочитаете CoffeeScript, то просто добавьте модуль CoffeeScript и начинайте писать на нем:

`mrt add coffeescript`

<% end %>